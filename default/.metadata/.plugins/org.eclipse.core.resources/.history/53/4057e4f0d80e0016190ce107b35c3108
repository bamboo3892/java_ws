package main;

import java.awt.Color;

import ai.AISheet;
import ai.EstimateAI;
import ai.MonteCarloAI;

public class ProssessingSheet extends Sheet implements Runnable {

	private MyPanel panel;
	private static boolean player[] = new boolean[3];
	private AISheet AI1 = new EstimateAI(true);
	private AISheet AI2 = new MonteCarloAI();
	private boolean isProcessing = false;
	private int nextX;
	private int nextY;

	public ProssessingSheet(MyPanel panel, AISheet ai1, AISheet ai2) {
		box = panel.box;
		this.panel = panel;
		this.teban = 1;
		player[1] = ai1 == null;
		player[2] = ai2 == null;
		AI1 = ai1;
		AI2 = ai2;
	}

	public void setNextPlaceLocation(int x, int y) {
		this.nextX = x;
		this.nextY = y;
	}

	@Override
	public void run() {
		if(!isProcessing){
			isProcessing = true;
			next(nextX, nextY);
			nextX = -999;
			nextY = -999;
			isProcessing = false;
		}
	}

	private void next(int x, int y) {//called only by clicking

		boolean flag = false;//should wait next player's click

		while (true){

			///////////////////////////////////////////////////////////////////////////
			if(isFilled()){
				panel.addLog("Game Finished", Color.green);
				panel.calculateAndPrintMessage();
				return;
			}
			if(!isTherePlaceToPutStone()){
				teban = teban == 1 ? 2 : 1;
				if(!isTherePlaceToPutStone()){
					panel.addLog("Both can't place stone at any place.", Color.green);
					panel.calculateAndPrintMessage();
					return;
				}
				panel.addLog((teban == 1 ? "White" : "Black") + " can't place stone at any place.", Color.red);
			}
			///////////////////////////////////////////////////////////////////////////

			if(player[teban]){
				if(flag) return;
				if(clicked(x, y)){
					teban = teban == 1 ? 2 : 1;
					flag = true;
				}else{
					return;
				}
			}else{
				panel.setCanClick(false);
				AISheet sheet = getAISheet(box, teban);
				sheet.decideNextPlace();
				if(!canPlaceAtAndReverse(sheet.getNextX(), sheet.getNextY())){
					panel.illegalFinishLog(teban == 1 ? 2 : 1);
					System.out.println("error?");
					return;
				}
				panel.setLastPlacedStone(sheet.getNextX(), sheet.getNextY());
				panel.addLog("(" + (teban == 1 ? "Black" : "White") + ")Place:" + sheet.getNextX() + "," + sheet.getNextY(), Color.white);
				teban = teban == 1 ? 2 : 1;
				panel.setCanClick(true);
				panel.repaint();
			}
		}
	}

	private boolean clicked(int x, int y) {
		if(!canPlaceAtAndReverse(x, y)){
			System.out.println("Can't place");
			return false;
		}
		panel.addLog("(" + (teban == 1 ? "Black" : "White") + ")Place:" + x + "," + y, Color.white);
		panel.setLastPlacedStone(x, y);
		panel.repaint();
		return true;
	}

	private AISheet getAISheet(int[][] box2, int teban2) {
		if(teban2 == 1){
			AI1.set(box2, teban2);
			return AI1;
		}else{
			AI2.set(box2, teban2);
			return AI2;
		}
	}

	public boolean isProcessing() {
		return this.isProcessing;
	}

}






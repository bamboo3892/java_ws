package main;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.MemoryImageSource;
import java.awt.image.PixelGrabber;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

import ai.AISheet;

public class MyPanel extends JPanel {

	private static Image backGround;
	private static Image blackStone;
	private static Image whiteStone;
	private static Image clearBlackStone;
	private static Image clearWhiteStone;

	private Thread processingThread = new Thread("ProcessingThread");
	private ProssessingSheet pp;
	private boolean canClick = false;
	private boolean isShowingLog = false;
	private boolean isFinished = false;
	private LinkedList<String> logList = new LinkedList<String>();
	private LinkedList<Color> logColorList = new LinkedList<Color>();

	protected MyPanel(AISheet ai1, AISheet ai2) throws IOException {
		setSize(Start.panelSize, Start.panelSize);
		backGround = ImageIO.read(new File("image/othello.png"));
		blackStone = ImageIO.read(new File("image/blackStone.png"));
		whiteStone = ImageIO.read(new File("image/whiteStone.png"));
		for (int i = 0; i < blackStone.getHeight(null); i++){
			for (int j = 0; j < blackStone.getWidth(null); j++){
				clearBlackStone = getAlphaImage(blackStone, 127);
			}
		}
		for (int i = 0; i < whiteStone.getHeight(null); i++){
			for (int j = 0; j < whiteStone.getWidth(null); j++){
				clearWhiteStone = getAlphaImage(whiteStone, 127);
			}
		}

		pp = new ProssessingSheet(this, ai1, ai2);
		addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent me) {
				mouseClickedEvent(me);
			}
		});

		addLog("Game Start", Color.blue);
		this.canClick = true;
		repaint();
	}

	private void mouseClickedEvent(MouseEvent e) {
		if(e.getButton() == 1){
			if(!canClick || isFinished || pp.isProcessing()) return;
			canClick = false;
			int coordX = e.getX();
			int coordY = e.getY();
			int x = (int) ((coordX - 8) / 74.0);
			int y = (int) ((coordY - 8) / 74.0);
			if(x < 0 || x > 7 || y < 0 || y > 7) return;
			pp.setNextPlaceLocation(x, y);
			processingThread = new Thread(pp, "ProcessingThread");
			processingThread.start();
			canClick = true;
		}else if(e.getButton() == 2){
			if(!canClick || isFinished || pp.isProcessing()) return;
			canClick = false;
			pp.back();
			addLog("Call a Halt!", Color.blue);
			canClick = true;
		}else if(e.getButton() == 3){
			canClick = !canClick;
			isShowingLog = !isShowingLog;
		}
		repaint();
	}

	@Override
	public void paint(Graphics g) {
		g.drawImage(backGround, 0, 0, this);

		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++){
				if(pp.getBoxForRender(i, j) == 0){
					continue;
				}else if(pp.getBoxForRender(i, j) == 1){
					g.drawImage(blackStone, 8 + 74 * i, 8 + 74 * j, 70, 70, this);
				}else if(pp.getBoxForRender(i, j) == 2){
					g.drawImage(whiteStone, 8 + 74 * i, 8 + 74 * j, 70, 70, this);
				}else if(pp.getBoxForRender(i, j) == 3){
					g.drawImage(clearBlackStone, 8 + 74 * i, 8 + 74 * j, 70, 70, this);
				}else if(pp.getBoxForRender(i, j) == 4){
					g.drawImage(clearWhiteStone, 8 + 74 * i, 8 + 74 * j, 70, 70, this);
				}
			}

		g.setColor(Color.blue);
		g.drawRect(8 + 74 * pp.getLastPlacedStoneX(), 8 + 74 * pp.getLastPlacedStoneY(), 69, 69);

		if(isShowingLog){
			g.setColor(new Color(0F, 0F, 0F, 0.75F));
			g.fillRect(Start.panelSize / 2 - 200, Start.panelSize / 2 - 175, 400, 350);
			g.setFont(new Font(Font.DIALOG, Font.PLAIN, 24));
			int size = logList.size();
			size = size < 14 ? size : 14;
			for (int i = 0; i < size; i++){
				g.setColor(logColorList.get(logList.size() - i - 1));
				g.drawString(logList.get(logList.size() - i - 1), Start.panelSize / 2 - 200 + 4, Start.panelSize / 2 - 175 + i * 25 + 22);
			}
		}
	}

	protected void addLog(String str, Color color) {
		logList.add(str);
		logColorList.add(color);
	}

	protected void calculateAndPrintMessage() {
		int black = 0;
		int white = 0;
		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++){
				if(pp.getBoxForRender(i, j) == 1){
					black++;
				}else if(pp.getBoxForRender(i, j) == 2){
					white++;
				}
			}
		addLog("Black:" + black + " White:" + white, Color.green);
		if(black > white){
			addLog("Black is Winner!", Color.green);
		}else if(black < white){
			addLog("White is Winner!", Color.green);
		}else{
			addLog("Draw!", Color.green);
		}
		this.canClick = false;
		isShowingLog = true;
		isFinished = true;
		repaint();
	}

	protected void illegalFinishLog(int winner) {
		addLog("on illegal position.", Color.green);
		addLog((winner == 1 ? "White" : "Black") + " AI try to put a stone", Color.green);
		addLog((winner == 1 ? "Black" : "White") + " is Winner!", Color.green);
		this.canClick = false;
		isShowingLog = true;
		isFinished = true;
		repaint();
	}

	public static Image getAlphaImage(Image img, int alpha) {
		if(img == null) return null;
		int width = img.getWidth(null);
		int height = img.getHeight(null);
		int[] pixel = new int[width * height];
		PixelGrabber pg = new PixelGrabber(img, 0, 0, width, height, pixel, 0, width);
		try{
			pg.grabPixels();
		}catch (InterruptedException e){
			return null;
		}

		for (int i = 0; i < width * height; i++){
			pixel[i] = pixel[i] | (alpha << 24);
		}

		Image alphaImage = Toolkit.getDefaultToolkit().createImage(new MemoryImageSource(width, height, pixel, 0, width));
		try{
			ImageIO.write((RenderedImage) alphaImage, "png", new File("output"));
		}catch (IOException e){
			e.printStackTrace();
		}
		return alphaImage;
	}

}

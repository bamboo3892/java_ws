package main;

public class Sheet {

	/**void:0, black:1, white:2*/
	protected int box[][] = new int[8][8];
	protected int teban;

	public Sheet() {

	}

	public Sheet(int[][] box, int teban) {
		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++){
				this.box[i][j] = box[i][j];
			}
		this.teban = teban;
	}

	protected boolean isFilled() {
		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++){
				if(box[i][j] != 1 && box[i][j] != 2) return false;
			}
		return true;
	}

	protected boolean isTherePlaceToPutStone(int teban) {
		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++){
				if(canPlace(i, j)) return true;
			}
		return false;
	}

	@Deprecated
	protected boolean isTherePlaceToPutStone() {
		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++){
				if(canPlace(i, j)) return true;
			}
		return false;
	}

	protected boolean canPlaceAtAndReverse(int x, int y, int teban) {
		if(box[x][y] != 0){
			//System.out.println("The place already has a stone");
			return false;
		}
		boolean b = false;
		for (int henniX = -1; henniX < 2; henniX++){
			flag: for (int henniY = -1; henniY < 2; henniY++){
				if(henniX == 0 && henniY == 0) continue flag;
				int reverseCount = 0;
				for (int i = 1; i < 8; i++){
					if(x + henniX * i < 0 || x + henniX * i > 7 || y + henniY * i < 0 || y + henniY * i > 7) continue flag;
					if(box[x + henniX * i][y + henniY * i] == (teban == 1 ? 2 : 1)){
						reverseCount++;
					}else if(box[x + henniX * i][y + henniY * i] == teban && reverseCount != 0){
						for (int j = 0; j < reverseCount + 1; j++)
							box[x + henniX * j][y + henniY * j] = teban;
						b = true;
						//System.out.println("reverse");
					}else{
						continue flag;
					}
				}
			}
		}
		return b;
	}

	@Deprecated
	protected boolean canPlaceAtAndReverse(int x, int y) {
		if(box[x][y] != 0){
			//System.out.println("The place already has a stone");
			return false;
		}
		boolean b = false;
		for (int henniX = -1; henniX < 2; henniX++){
			flag: for (int henniY = -1; henniY < 2; henniY++){
				if(henniX == 0 && henniY == 0) continue flag;
				int reverseCount = 0;
				for (int i = 1; i < 8; i++){
					if(x + henniX * i < 0 || x + henniX * i > 7 || y + henniY * i < 0 || y + henniY * i > 7) continue flag;
					if(box[x + henniX * i][y + henniY * i] == (teban == 1 ? 2 : 1)){
						reverseCount++;
					}else if(box[x + henniX * i][y + henniY * i] == teban && reverseCount != 0){
						for (int j = 0; j < reverseCount + 1; j++)
							box[x + henniX * j][y + henniY * j] = teban;
						b = true;
						//System.out.println("reverse");
					}else{
						continue flag;
					}
				}
			}
		}
		return b;
	}

	@Deprecated
	protected boolean canPlace(int x, int y) {
		return this.canPlace(x, y, teban);
	}

	protected boolean canPlace(int x, int y, int teban) {
		if(box[x][y] != 0){
			//System.out.println("The place already has a stone");
			return false;
		}
		boolean b = false;
		for (int henniX = -1; henniX < 2; henniX++){
			flag: for (int henniY = -1; henniY < 2; henniY++){
				if(henniX == 0 && henniY == 0) continue flag;
				int reverseCount = 0;
				for (int i = 1; i < 8; i++){
					if(x + henniX * i < 0 || x + henniX * i > 7 || y + henniY * i < 0 || y + henniY * i > 7) continue flag;
					if(box[x + henniX * i][y + henniY * i] == (teban == 1 ? 2 : 1)){
						reverseCount++;
					}else if(box[x + henniX * i][y + henniY * i] == teban && reverseCount != 0){
						b = true;
					}else{
						continue flag;
					}
				}
			}
		}
		return b;
	}

	protected boolean canPlace(int[][] pbox, int x, int y, int teban) {
		if(box[x][y] != 0){
			//System.out.println("The place already has a stone");
			return false;
		}
		boolean b = false;
		for (int henniX = -1; henniX < 2; henniX++){
			flag: for (int henniY = -1; henniY < 2; henniY++){
				if(henniX == 0 && henniY == 0) continue flag;
				int reverseCount = 0;
				for (int i = 1; i < 8; i++){
					if(x + henniX * i < 0 || x + henniX * i > 7 || y + henniY * i < 0 || y + henniY * i > 7) continue flag;
					if(box[x + henniX * i][y + henniY * i] == (teban == 1 ? 2 : 1)){
						reverseCount++;
					}else if(box[x + henniX * i][y + henniY * i] == teban && reverseCount != 0){
						b = true;
					}else{
						continue flag;
					}
				}
			}
		}
		return b;
	}

	/**return winner's teban*/
	protected int judge() {
		return this.judge(this.box);
	}

	/**return winner's teban*/
	protected int judge(int[][] pbox) {
		int black = 0;
		int white = 0;
		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++){
				if(pbox[i][j] == 1){
					black++;
				}else if(pbox[i][j] == 2){
					white++;
				}
			}
		return black < white ? 2 : 1;
	}

}

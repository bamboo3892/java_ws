package main;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

import ai.AISheet;

public class MyPanel extends JPanel {

	public int box[][] = new int[8][8];//void:0, black:1, white:2
	private static BufferedImage backGround;
	private static BufferedImage blackStone;
	private static BufferedImage whiteStone;

	private Thread processingThread = new Thread("ProcessingThread");
	private ProssessingSheet pp;
	private boolean canClick = false;
	private boolean isShowingLog = false;
	private boolean isFinished = false;
	private LinkedList<String> logList = new LinkedList<String>();
	private LinkedList<Color> logColorList = new LinkedList<Color>();
	private int lastPlacedStoneX;
	private int lastPlacedStoneY;

	protected MyPanel(AISheet ai1, AISheet ai2) throws IOException {
		setSize(Start.panelSize, Start.panelSize);
		backGround = ImageIO.read(new File("image/othello.png"));
		blackStone = ImageIO.read(new File("image/blackStone.png"));
		whiteStone = ImageIO.read(new File("image/whiteStone.png"));
		pp = new ProssessingSheet(this, ai1, ai2);
		addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent me) {
				mouseClickedEvent(me);
			}
		});
		this.addKeyListener(this);

		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++)
				box[i][j] = 0;
		box[3][4] = box[4][3] = 1;
		box[3][3] = box[4][4] = 2;

		addLog("Game Start", Color.blue);
		setCanClick(true);
		repaint();
	}

	private void mouseClickedEvent(MouseEvent e) {
		if(e.getButton() == 1){
			if(!canClick || isFinished || pp.isProcessing()) return;
			int coordX = e.getX();
			int coordY = e.getY();
			int x = (int) ((coordX - 8) / 74.0);
			int y = (int) ((coordY - 8) / 74.0);
			if(x < 0 || x > 7 || y < 0 || y > 7) return;
			pp.setNextPlaceLocation(x, y);
			processingThread = new Thread(pp, "ProcessingThread");
			processingThread.start();
		}else if(e.getButton() == 3){
			canClick = !canClick;
			isShowingLog = !isShowingLog;
		}
		repaint();
	}

	private void keyEvent() {

	}

	@Override
	public void paint(Graphics g) {
		g.drawImage(backGround, 0, 0, this);

		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++){
				if(box[i][j] == 0){
					continue;
				}else if(box[i][j] == 1){
					g.drawImage(blackStone, 8 + 74 * i, 8 + 74 * j, 70, 70, this);
				}else if(box[i][j] == 2){
					g.drawImage(whiteStone, 8 + 74 * i, 8 + 74 * j, 70, 70, this);
				}else{
					System.out.println("error!");
				}
			}

		g.setColor(Color.blue);
		g.drawRect(8 + 74 * lastPlacedStoneX, 8 + 74 * lastPlacedStoneY, 69, 69);

		if(isShowingLog){
			paintLog(g);
		}
	}

	private void paintLog(Graphics g) {
		g.setColor(new Color(0F, 0F, 0F, 0.75F));
		g.fillRect(Start.panelSize / 2 - 200, Start.panelSize / 2 - 175, 400, 350);
		g.setFont(new Font(Font.DIALOG, Font.PLAIN, 24));
		int size = logList.size();
		size = size < 14 ? size : 14;
		for (int i = 0; i < size; i++){
			g.setColor(logColorList.get(logList.size() - i - 1));
			g.drawString(logList.get(logList.size() - i - 1), Start.panelSize / 2 - 200 + 4, Start.panelSize / 2 - 175 + i * 25 + 22);
		}
	}

	protected void addLog(String str, Color color) {
		logList.add(str);
		logColorList.add(color);
	}

	protected void setLastPlacedStone(int x, int y) {
		this.lastPlacedStoneX = x;
		this.lastPlacedStoneY = y;
	}

	protected void setCanClick(boolean b) {
		this.canClick = b;
	}

	protected void calculateAndPrintMessage() {
		int black = 0;
		int white = 0;
		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++){
				if(box[i][j] == 1){
					black++;
				}else if(box[i][j] == 2){
					white++;
				}
			}
		addLog("Black:" + black + " White:" + white, Color.green);
		if(black > white){
			addLog("Black is Winner!", Color.green);
		}else if(black < white){
			addLog("White is Winner!", Color.green);
		}else{
			addLog("Draw!", Color.green);
		}
		setCanClick(false);
		isShowingLog = true;
		isFinished = true;
		repaint();
	}

	protected void illegalFinishLog(int winner) {
		addLog("on illegal position.", Color.green);
		addLog((winner == 1 ? "White" : "Black") + " AI try to put a stone", Color.green);
		addLog((winner == 1 ? "Black" : "White") + " is Winner!", Color.green);
		setCanClick(false);
		isShowingLog = true;
		isFinished = true;
		repaint();
	}

}

package main;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import api.AISheet;
import api.ILearnableAI;
import api.Sheet;

public class LearningSheet extends Sheet implements Runnable {

	private LearningGui gui;
	private FileSaveThread saveThread;
	private final AISheet learnable;
	private AISheet otherAI;
	private final int repeat;
	private final int saveRate;
	private final int tebanCommand;

	public LearningSheet(LearningGui gui, AISheet learnable, AISheet otherAI, int repeat, int saveRate, int tebanCommand) throws FileNotFoundException, IOException, ClassNotFoundException {
		if(gui == null || learnable == null || otherAI == null || repeat <= 0 || saveRate <= 0 || tebanCommand < 0 || tebanCommand > 2) throw new IllegalArgumentException();
		if(learnable instanceof ILearnableAI && ((ILearnableAI) learnable).canLearnFrom(otherAI)){
			gui.addLearningLog(learnable.getAIName() + " can learn from " + otherAI.getAIName());
		}else{
			gui.addLearningLog(learnable.getAIName() + " cannot learn from " + otherAI.getAIName());
		}
		this.gui = gui;
		this.saveThread = new FileSaveThread(learnable);
		this.learnable = learnable;
		this.otherAI = otherAI;
		this.repeat = repeat;
		this.saveRate = saveRate;
		this.tebanCommand = tebanCommand;
		if(learnable instanceof ILearnableAI){
			File saveFile = Start.getSaveFileFromClass(learnable.getClass());
			System.out.println("input : " + saveFile.getPath());
			try (ObjectInputStream input = new ObjectInputStream(new FileInputStream(saveFile))){
				((ILearnableAI) learnable).setMetaFromSavedObject(input.readObject());
				gui.addLearningLog("Successfully read from saved object.");
			}catch (Exception e){
				e.printStackTrace();
				((ILearnableAI) learnable).setMetaFromSavedObject(null);
			}
		}
	}

	@Override
	public void run() {

		int duel = 0;
		int win = 0;
		for (int i = 0; i < repeat; i++){

			//set other ai.
			try{
				otherAI = otherAI.getClass().newInstance();
			}catch (InstantiationException | IllegalAccessException e){
				System.out.println(otherAI.getAIName() + " does not have default constructor.");
				e.printStackTrace();
				return;
			}

			int originalTeban;
			if(tebanCommand == LearningGui.TEBAN_SENTE_FIXED){
				originalTeban = 1;
			}else if(tebanCommand == LearningGui.TEBAN_GOTE_FIXED){
				originalTeban = 2;
			}else{
				originalTeban = (int) (Math.random() * 2) + 1;
			}
			int winner = duel(originalTeban);
			gui.addLearningLog("Winner is " + (winner == 1 ? "Sente" : "Gote") + " (" + (winner == originalTeban ? learnable.getAIName() : otherAI.getAIName()) + ")");
			duel++;

			//learn
			if(winner == originalTeban){
				win++;
				if(learnable instanceof ILearnableAI && ((ILearnableAI) learnable).canLearnFrom(otherAI)){
					gui.addLearningLog(learnable.getAIName() + " learn from " + otherAI.getAIName());
					gui.addLearningLog(((ILearnableAI) learnable).learnFrom(otherAI));
				}
			}

			//save
			if(win % saveRate == saveRate - 1 && learnable instanceof ILearnableAI){
				saveThread.addSaveObject(((ILearnableAI) learnable).getSaveObjectClone());
				gui.addLearningLog("Save: " + learnable.getAIName());
			}

			gui.setLeaningProgress(i / (float) repeat);

		}

		//save
		if(learnable instanceof ILearnableAI){
			saveThread.addSaveObject(((ILearnableAI) learnable).getSaveObjectClone());
			gui.addLearningLog("Save: " + learnable.getAIName());
		}
		gui.setLeaningProgress(1.0f);
		gui.addLearningLog("Finish!");
		gui.addLearningLog("win rate : " + ((double) win / (double) duel));
	}

	private int duel(int originalTeban) {//return winner
		for (int i = 0; i < 8; i++)
			for (int j = 0; j < 8; j++)
				box[i][j] = 0;
		box[3][4] = box[4][3] = 1;
		box[3][3] = box[4][4] = 2;

		while (true){

			///////////////////////////////////////////////////////////////////////////
			if(!isTherePlaceToPutStone()){
				teban = teban == 1 ? 2 : 1;
				if(!isTherePlaceToPutStone()){
					return judge();
				}
			}
			///////////////////////////////////////////////////////////////////////////

			AISheet sheet = teban == originalTeban ? learnable : otherAI;
			sheet.set(box, teban);
			sheet.decideNextPlace();
			if(!canPlaceAtAndReverse(sheet.getNextX(), sheet.getNextY())) System.out.println("error?");
			teban = teban == 1 ? 2 : 1;
		}
	}


	private class FileSaveThread {

		private Thread saveThread = new Thread("Save Thread");
		private ObjectOutputStream output;
		private List<Object> saveList = Collections.synchronizedList(new LinkedList<Object>());

		protected FileSaveThread(AISheet saveAI) throws FileNotFoundException, IOException {
			File saveFile = Start.getSaveFileFromClass(saveAI.getClass());
			if(saveFile == null) throw new IllegalArgumentException("This is my fault. I'm sorry.");
			if(!saveFile.exists()){
				saveFile.getParentFile().mkdirs();
				saveFile.createNewFile();
			}
			System.out.println("output : " + saveFile.getPath());
			output = new ObjectOutputStream(new FileOutputStream(saveFile));
		}

		private void addSaveObject(Object object) {
			if(object != null){
				saveList.add(object);
				if(saveThread.getState() == Thread.State.NEW || saveThread.getState() == Thread.State.TERMINATED){
					saveThread = new Thread(() -> {
						while (true){
							System.out.println("try to save");
							if(saveList.isEmpty()) break;
							Object save = saveList.get(0);
							try{
								output.writeObject(save);
							}catch (IOException e){
								System.out.println("Excception while saving.");
								System.out.println("Stop saving.");
								e.printStackTrace();
								break;
							}
							saveList.remove(0);
						}
					}, "Save Thread");
					start();
				}
			}
		}

		public void run() {
			while (true){
				System.out.println("try to save");
				if(saveList.isEmpty()) break;
				Object save = saveList.get(0);
				try{
					output.writeObject(save);
				}catch (IOException e){
					System.out.println("Excception while saving.");
					System.out.println("Stop saving.");
					e.printStackTrace();
					break;
				}
				saveList.remove(0);
			}
		}

	}

}









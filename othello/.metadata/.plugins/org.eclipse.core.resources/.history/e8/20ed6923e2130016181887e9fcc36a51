package application;

import java.io.IOException;

import api.AISheet;
import application.Lancher.AIAttribute;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.stage.Stage;
import main.AIButtleGui;
import main.MainPanel;
import main.MainPanel.GameMode;

public class LauncherController {

	@FXML
	private ComboBox<GameMode> cBoxGameMode;
	@FXML
	private Label goteLabel;
	@FXML
	private Label senteLabel;
	@FXML
	private ComboBox<AIAttribute> senteAI;
	@FXML
	private ComboBox<AIAttribute> goteAI;
	@FXML
	private TextArea senteInfo;
	@FXML
	private TextArea goteInfo;
	@FXML
	FlowPane learnCfgPane;
	@FXML
	TextField repeat;
	@FXML
	TextField saveRate;
	@FXML
	ComboBox<TurnPolicy> turnPolicy;
	@FXML
	private Button startBtn;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	@FXML
	private TableView<AIAttribute> aiTable;
	@FXML
	TableColumn<AIAttribute, String> nameColumn;
	@FXML
	TableColumn<AIAttribute, String> versionColumn;
	@FXML
	TableColumn<AIAttribute, String> authorColumn;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@FXML
	public void initialize() {
		cBoxGameMode.getItems().clear();
		cBoxGameMode.getItems().addAll(GameMode.values());
		cBoxGameMode.getSelectionModel().select(0);

		turnPolicy.getItems().addAll(TurnPolicy.values());
		turnPolicy.getSelectionModel().select(0);

		for (AIAttribute attribute : Lancher.AIList){
			senteAI.getItems().add(attribute);
			goteAI.getItems().add(attribute);
			aiTable.getItems().add(attribute);
		}
		senteAI.getSelectionModel().select(0);
		goteAI.getSelectionModel().select(0);

		nameColumn.setCellValueFactory(new PropertyValueFactory<AIAttribute, String>("name"));
		versionColumn.setCellValueFactory(new PropertyValueFactory<AIAttribute, String>("version"));
		authorColumn.setCellValueFactory(new PropertyValueFactory<AIAttribute, String>("author"));

		updateStartBtnState();
	}

	@FXML
	public void onGameModeChanged(ActionEvent event) {
		updateStartBtnState();
	}

	@FXML
	public void onSenteAIChanged(ActionEvent event) {
		updateStartBtnState();
	}

	@FXML
	public void onGoteAIChanged(ActionEvent event) {
		updateStartBtnState();
	}

	@FXML
	public void onStartButtonClicked(ActionEvent event) {
		updateStartBtnState();
		if(!startBtn.isDisabled()){
			if(cBoxGameMode.getSelectionModel() != null && cBoxGameMode.getSelectionModel().getSelectedItem() != null){
				switch (cBoxGameMode.getSelectionModel().getSelectedItem()) {
				case NORMAL_BUTTLE:
					try{
						AISheet ai1 = null;
						AISheet ai2 = null;
						AIAttribute aiClass1 = senteAI.getSelectionModel() == null ? null : senteAI.getSelectionModel().getSelectedItem();
						if(aiClass1 != null && aiClass1.alClass != null){
							ai1 = aiClass1.alClass.newInstance();
						}
						AIAttribute aiClass2 = goteAI.getSelectionModel() == null ? null : goteAI.getSelectionModel().getSelectedItem();
						if(aiClass2 != null && aiClass2.alClass != null){
							ai2 = aiClass2.alClass.newInstance();
						}
						MainPanel.openNewGamePanel(ai1, ai2);
					}catch (Exception e1){
						System.err.println("Error");
						e1.printStackTrace();
					}
					break;
				case AI_BUTTLE:
					AIButtleGui gui = null;
					try{
						//						AISheet ai1 = null;
						//						AISheet ai2 = null;
						//						AIAttribute aiClass1 = senteAI.getSelectionModel() == null ? null : senteAI.getSelectionModel().getSelectedItem();
						//						if(aiClass1 != null && aiClass1.alClass != null){
						//							ai1 = aiClass1.alClass.newInstance();
						//						}
						//						AIAttribute aiClass2 = goteAI.getSelectionModel() == null ? null : goteAI.getSelectionModel().getSelectedItem();
						//						if(aiClass2 != null && aiClass2.alClass != null){
						//							ai2 = aiClass2.alClass.newInstance();
						//						}
						//						int repeat = Integer.valueOf(this.repeat.getText());
						//						int saveRate = Integer.valueOf(this.saveRate.getText());
						//						int turnPolicy = this.turnPolicy.getSelectionModel().getSelectedItem().ID;
						//						gui = new AIButtleGui(ai1, ai2, 0, repeat, saveRate, turnPolicy);
						//						ai1.setGuiRenderer(gui);
						//						ai2.setGuiRenderer(gui);

						try{
							BorderPane root = (BorderPane) FXMLLoader.load(getClass().getResource("AIButtle.fxml"));
							Scene scene = new Scene(root, 450, 500);
							scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
							Stage stage = new Stage();
							stage.setTitle("AI Buttle");
							stage.setScene(scene);
							stage.setResizable(false);
							stage.setScene(new Scene(root, 450, 450));
							stage.show();

							//hide this current window (if this is whant you want
							((Node) (event.getSource())).getScene().getWindow().hide();

						}catch (IOException e){
							e.printStackTrace();
						}

					}catch (Exception e1){
						e1.printStackTrace();
						return;
					}
					if(gui != null) gui.setVisible(true);
					break;
				default:
					break;
				}
			}
		}
	}

	private void updateStartBtnState() {
		if(cBoxGameMode.getSelectionModel() != null && cBoxGameMode.getSelectionModel().getSelectedItem() != null){
			if(cBoxGameMode.getSelectionModel().getSelectedItem() == GameMode.NORMAL_BUTTLE){
				learnCfgPane.setDisable(true);
				startBtn.setDisable(senteAI.selectionModelProperty() == null || goteAI.selectionModelProperty() == null);
			}else if(cBoxGameMode.getSelectionModel().getSelectedItem() == GameMode.AI_BUTTLE){
				learnCfgPane.setDisable(false);
				if(isValidSelected(senteAI) && isValidSelected(goteAI)){
					try{
						int repeat = Integer.valueOf(String.valueOf(this.repeat.getCharacters()));
						int saveRate = Integer.valueOf(String.valueOf(this.saveRate.getCharacters()));
						if(repeat > 0 && saveRate > 0){
							startBtn.setDisable(false);
							return;
						}else{
							startBtn.setDisable(true);
						}
					}catch (Exception e){
						startBtn.setDisable(true);
					}
				}
				startBtn.setDisable(true);
			}
		}else{
			startBtn.setDisable(true);
			learnCfgPane.setDisable(true);
		}
	}

	private static boolean isValidSelected(ComboBox<AIAttribute> cBox) {
		return cBox != null && cBox.getSelectionModel() != null && cBox.getSelectionModel().getSelectedItem() != null && !cBox.getSelectionModel().getSelectedItem().equals(AIAttribute.PLAYER);
	}

	protected enum TurnPolicy {

		RANDOM_TURN(0),

		SENTE_FIXED(1),

		GOTE_FIXED(2);

		public final int ID;

		private TurnPolicy(int ID) {
			this.ID = ID;
		}

		@Override
		public String toString() {
			return super.toString().replace("_", " ");
		}

	}

}

package main;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;

import api.AISheet;
import api.IGuiRenderer;

public class LearningGui extends JFrame implements ActionListener, IGuiRenderer {

	private static final long serialVersionUID = -584037256605831173L;

	public static final int TEBAN_RANDOM = 0;
	public static final int TEBAN_SENTE_FIXED = 1;
	public static final int TEBAN_GOTE_FIXED = 2;

	private Thread learningThread;
	private LearningSheet sheet;
	private JPanel contentPane;
	private JScrollPane textPane;
	private JTextArea textArea;
	private JProgressBar bar;
	private JButton btn;

	/**
	 *
	 * @param learnable
	 * @param otherAI
	 * @param repeat
	 * @param saveRate
	 * @param tebanCommand
	 */
	public LearningGui(AISheet learnable, AISheet otherAI, int repeat, int saveRate, int tebanCommand) {
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 326, 379);

		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);

		textPane = new JScrollPane();
		contentPane.add(textPane, BorderLayout.CENTER);
		textArea = new JTextArea();
		textPane.setViewportView(textArea);

		bar = new JProgressBar();
		bar.setMinimum(0);
		bar.setMaximum(100);
		bar.setValue(0);
		bar.setStringPainted(true);
		bar.setString("0%");
		contentPane.add(bar, BorderLayout.NORTH);

		btn = new JButton("start");
		btn.addActionListener(this);
		contentPane.add(btn, BorderLayout.SOUTH);

		setVisible(true);

		sheet = new LearningSheet(this, learnable, otherAI, repeat, saveRate, tebanCommand);
	}

	public void addLearningLog(String message) {
		textArea.append(message + "\n");
	}
	public void setLeaningProgress(float progress) {
		bar.setValue((int) (100 * progress));
		bar.setString(100 * progress + "%");
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == btn && learningThread == null){
			learningThread = new Thread(sheet, "Learning Thread");
			learningThread.start();
			btn.setEnabled(false);
		}
	}

	@Override
	public float getProgress() {
		return 0;
	}
	@Override
	public void setProgress(float f) {}
	@Override
	public void addProgress(float f) {}
	@Override
	public void addLog(String str, Color color) {}

}

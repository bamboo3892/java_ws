package ai;

import java.util.LinkedList;

public class EstimteAISheet extends AISheet{

	private int originalTeban;
	private LinkedList<int[][]> boxHistory = new LinkedList<int[][]>();
	private final int rupe = 5;

	private final int value00 = 1;
	private final int value10 = 1;
	private final int value20 = 1;
	private final int value30 = 1;
	private final int value11 = 1;
	private final int value21 = 1;
	private final int value31 = 1;
	private final int value22 = 1;
	private final int value32 = 1;
	private final int value33 = 1;
	private final int ratioAb = 1;//

	public EstimteAISheet(int[][] box, int teban) {
		super(box, teban);
		originalTeban = teban;
		changeList(box, 0);
	}

	@Override
	public void decideNextPlace() {
		if(box[3][4]==1 && box[4][3]==1 && box[3][3]==2 && box[4][4]==2 && box[2][3]==0){
			this.nextX = 2;
			this.nextY = 3;
			return;
		}
		float max = 0;
		int maxX = 0;
		int maxY = 0;
		int nnn2 = 0;
		this.box = getList(0);
		this.teban = originalTeban;
		for(int i=0;i<8;i++) for(int j=0;j<8;j++) {
			if(canPlace(i, j)){
				System.out.println("nnn2="+nnn2);
				canPlaceAtAndReverse(i, j);
				changeList(box, 1);
				float a = nextAssumption(teban==1 ? 2 : 1, 1, false);
				if(max <= a){
					max = a;
					maxX = i;
					maxY = j;
				}
				nnn2++;
				this.box = getList(0);
				this.teban = originalTeban;
			}
		}
		this.nextX = maxX;
		this.nextY = maxY;
	}

	private float nextAssumption(int p_teban, int p_index, boolean b){//return assessment point
		//boxには試行すべきものが入っている
		if(p_index >= this.rupe){
			return estimate(getList(p_index), this.originalTeban);
		}

		float point = 0;
		int change = 0;
		//this.box = getList(p_index);
		this.teban = p_teban;
		if(p_teban == originalTeban){
			float max = 0;
			for(int i=0;i<8;i++) for(int j=0;j<8;j++) {
				if(canPlaceAtAndReverse(i, j)) {
					changeList(box, p_index+1);
					float p = nextAssumption(p_teban==1 ? 2 : 1, p_index+1, false);
					change++;
					max = max<p ? p : max;
					this.box = getList(p_index);
					this.teban = p_teban;
				}
			}
			point = max;
		}else{
			float sum = 0;
			float n = 0;
			for(int i=0;i<8;i++) for(int j=0;j<8;j++){
				if(canPlaceAtAndReverse(i, j)) {
					changeList(box, p_index+1);
					float p = nextAssumption(p_teban==1 ? 2 : 1, p_index+1, false);
					change++;
					sum += p;
					n++;
					this.box = getList(p_index);
					this.teban = p_teban;
				}
			}
			point = sum/n;
		}
		if(change == 0){
			if(b){
				point = estimate(box, originalTeban);
			}else{
				changeList(box, p_index+1);
				float p = nextAssumption(p_teban==1 ? 2 : 1, p_index+1, true);
				point = p;
			}
		}
		return point;
	}

	private int estimate(int[][] pbox, int pteban){
		int value = 0;
		int[][] tbox = changeBox(pbox);
		for(int i=0;i<8;i++) for(int j=0;j<8;j++) {
			int n = tbox[i][j];
			if(n < 10){
				if(n == pteban){
					value += getPoint(i, j);
				}else if(n != 0){
					value -= getPoint(i, j);
				}
			}else{
				if(n-10 == pteban){
					value += getPoint(i, j) * ratioAb;
				}else{
					value -= getPoint(i, j) * ratioAb;
				}
			}
		}
		return value;
	}

	private int[][] changeBox(int[][] pbox) {
		int[][] tbox = new int[8][8];
		for(int i=0;i<8;i++) for(int j=0;j<8;j++) {
			tbox[i][j] = pbox[i][j];
		}
		return tbox;
	}

	private void changeList(int[][] pbox, int pindex){
		int[][] tbox = new int[8][8];
		for(int i=0;i<8;i++) for(int j=0;j<8;j++) {
			tbox[i][j] = pbox[i][j];
		}
		if(boxHistory.size() > pindex){
			boxHistory.set(pindex, tbox);
		}else{
			boxHistory.add(tbox);
			//System.out.println(pindex);
		}
	}

	private int[][] getList(int index){
		int[][] tbox = new int[8][8];
		for(int i=0;i<8;i++) for(int j=0;j<8;j++) {
			tbox[i][j] = boxHistory.get(index)[i][j];
		}
		return tbox;
	}

	private int getPoint(int x, int y){
		switch (x) {
		case 0 :
			switch (y){
			case 0 : return value00;
			case 1 : return value10;
			case 2 : return value20;
			case 3 : return value30;
			case 4 : return value30;
			case 5 : return value20;
			case 6 : return value10;
			case 7 : return value00;
			}
		case 1 :
			switch (y){
			case 0 : return value10;
			case 1 : return value11;
			case 2 : return value21;
			case 3 : return value31;
			case 4 : return value31;
			case 5 : return value21;
			case 6 : return value11;
			case 7 : return value10;
			}
		case 2 :
			switch (y){
			case 0 : return value20;
			case 1 : return value21;
			case 2 : return value22;
			case 3 : return value32;
			case 4 : return value32;
			case 5 : return value22;
			case 6 : return value21;
			case 7 : return value20;
			}
		case 3 :
			switch (y){
			case 0 : return value30;
			case 1 : return value31;
			case 2 : return value32;
			case 3 : return value33;
			case 4 : return value33;
			case 5 : return value32;
			case 6 : return value31;
			case 7 : return value30;
			}
		case 4 :
			switch (y){
			case 0 : return value30;
			case 1 : return value31;
			case 2 : return value32;
			case 3 : return value33;
			case 4 : return value33;
			case 5 : return value32;
			case 6 : return value31;
			case 7 : return value30;
			}
		case 5 :
			switch (y){
			case 0 : return value20;
			case 1 : return value21;
			case 2 : return value22;
			case 3 : return value32;
			case 4 : return value32;
			case 5 : return value22;
			case 6 : return value21;
			case 7 : return value20;
			}
		case 6 :
			switch (y){
			case 0 : return value10;
			case 1 : return value11;
			case 2 : return value21;
			case 3 : return value31;
			case 4 : return value31;
			case 5 : return value21;
			case 6 : return value11;
			case 7 : return value10;
			}
		case 7 :
			switch (y){
			case 0 : return value00;
			case 1 : return value10;
			case 2 : return value20;
			case 3 : return value30;
			case 4 : return value30;
			case 5 : return value20;
			case 6 : return value10;
			case 7 : return value00;
			}
		}
		return 0;
	}

}









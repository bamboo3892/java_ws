package com.test.network;

import com.test.main.TestCore;
import com.test.tileentity.ISimpleTilePacketUser;

import cpw.mods.fml.common.network.ByteBufUtils;
import cpw.mods.fml.common.network.simpleimpl.IMessage;
import cpw.mods.fml.common.network.simpleimpl.IMessageHandler;
import cpw.mods.fml.common.network.simpleimpl.MessageContext;
import io.netty.buffer.ByteBuf;
import net.minecraft.client.Minecraft;
import net.minecraft.nbt.NBTTagCompound;

public class SimpleTilePacket implements IMessage {

	public static final byte SLIDER_INPUT = 1;
	public static final byte EFFECT = 2;

	public static final byte OTHER = 4;
	public static final byte FILTER = 5;
	public static final byte FLAG_IO = 6;
	public static final byte NBT_CONETENT = 7;
	public static final byte NBT_CONNECTION = 8;

	public int x;
	public int y;
	public int z;
	public byte command;
	public Object value;

	public SimpleTilePacket() {}

	public SimpleTilePacket(int x, int y, int z, byte command, Object value) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.command = command;
		PacketType type = PacketType.getFromId(command);
		if(!type.valueClass.isAssignableFrom(value.getClass())) throw new IllegalArgumentException();

//		boolean flag = false;
//		if(command == SLIDER_INPUT){
//			flag = value instanceof Integer;
//		}else if(command == EFFECT){
//			flag = value instanceof Integer;
//		}else if(command == OTHER){
//			flag = value instanceof String;
//		}else if(command == FILTER){
//			flag = value instanceof String;
//		}else if(command == FLAG_IO){
//			flag = value instanceof String;
//		}else if(command == NBT_CONETENT){
//			flag = value instanceof NBTTagCompound;
//		}else if(command == NBT_CONNECTION){
//			flag = value instanceof NBTTagCompound;
//		}
//		if(flag) {
//			this.value = value;
//		}else{
//			throw new IllegalArgumentException();
//		}
	}

	@Override
	public void fromBytes(ByteBuf buf) {
		try{
			x = buf.readInt();
			y = buf.readInt();
			z = buf.readInt();
			command = buf.readByte();
			PacketType type = PacketType.getFromId(command);
			if(type.valueClass == Integer.class){
				value = buf.readInt();
			}else if(type.valueClass == String.class){
				value = ByteBufUtils.readUTF8String(buf);
			}else if(type.valueClass == NBTTagCompound.class){
				value = ByteBufUtils.readTag(buf);
			}
		}catch (Exception e){
			e.printStackTrace();
			System.err.println("Illegal packet received");
		}
	}

	@Override
	public void toBytes(ByteBuf buf) {
		try{
			buf.writeInt(x);
			buf.writeInt(y);
			buf.writeInt(z);
			buf.writeByte(command);
			if(command == SLIDER_INPUT){
				buf.writeInt((Integer)value);
			}else if(command == EFFECT){
				buf.writeInt((Integer)value);
			}else if(command == OTHER){
				ByteBufUtils.writeUTF8String(buf, (String)value);
			}else if(command == FILTER){
				ByteBufUtils.writeUTF8String(buf, (String)value);
			}else if(command == FLAG_IO){
				ByteBufUtils.writeUTF8String(buf, (String)value);
			}else if(command == NBT_CONETENT){
				ByteBufUtils.writeTag(buf, (NBTTagCompound)value);
			}else if(command == NBT_CONNECTION){
				ByteBufUtils.writeTag(buf, (NBTTagCompound)value);
			}
		}catch (Exception e){
			e.printStackTrace();
		}
	}

	@Override
	public String toString() {
		return String.format("Simple Tile Packet : x, y, z = %s, %s, %s : command = %s : value = %s", x, y, z, command, value);
	}

	/**server only*/
	public static class SimpleTilePacketHandler implements IMessageHandler<SimpleTilePacket, IMessage> {

		@Override
		public IMessage onMessage(SimpleTilePacket msg, MessageContext ctx) {
			//System.out.println(String.format("Received %s from %s", msg, ctx.getServerHandler().playerEntity.getDisplayName()));

			if(ctx.getServerHandler().playerEntity.worldObj.getTileEntity(msg.x, msg.y, msg.z) instanceof ISimpleTilePacketUser){
				ISimpleTilePacketUser tile = (ISimpleTilePacketUser) ctx.getServerHandler().playerEntity.worldObj.getTileEntity(msg.x, msg.y, msg.z);
				tile.processCommand(msg.command, msg.value);
				TestCore.packetDispatcher.sendToDimension(msg, ctx.getServerHandler().playerEntity.dimension);
			}

			return null;
		}

	}

	/**client only*/
	public static class SimpleTileReplyPacketHandler implements IMessageHandler<SimpleTilePacket, IMessage> {

		@Override
		public IMessage onMessage(SimpleTilePacket msg, MessageContext ctx) {
			//System.out.println(String.format("Received %s from %s", msg, ctx.side.SERVER));

			if(Minecraft.getMinecraft().theWorld.getTileEntity(msg.x, msg.y, msg.z) instanceof ISimpleTilePacketUser){
				ISimpleTilePacketUser tile = (ISimpleTilePacketUser) Minecraft.getMinecraft().theWorld.getTileEntity(msg.x, msg.y, msg.z);
				tile.processCommand(msg.command, msg.value);
			}

			return null;
		}

	}

	public enum PacketType{

		UNKNOWN(0, null),
		SLIDER_INPUT(1, Integer.class),
		EFFECT(2, Integer.class),
		FILTER(5, String.class),
		FLAG_IO(6, String.class),
		NBT_CONETENT(7, NBTTagCompound.class),
		NBT_CONNECTION(8, NBTTagCompound.class),
		OTHER(10, String.class);

		public final int id;
		public final Class valueClass;

		private PacketType(int id, Class valueClass){
			this.id =id;
			this.valueClass = valueClass;
		}

		public static PacketType getFromId(int id){
			for(PacketType type : PacketType.values()){
				if(type.id == id) return type;
			}
			return UNKNOWN;
		}

	}
	/*for 1.8
	@Override
	public IMessage onMessage(PacketClockPulser message, MessageContext ctx) {
	    IThreadListener mainThread = (WorldServer) ctx.getServerHandler().playerEntity.worldObj; // or Minecraft.getMinecraft() on the client
	    mainThread.addScheduledTask(new Runnable() {
	        @Override
	        public void run() {
	            System.out.println(String.format("Received %s from %s", message.text, ctx.getServerHandler().playerEntity.getDisplayName()));
	        }
	    });
	    return null; // no response in this case
	}
	*/

}

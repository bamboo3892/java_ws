package com.test.multiblock.construct.tileentity;

import java.util.ArrayList;

import com.test.utils.ConnectionEntry;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.IInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;

public class ConstructInterfaceTileEntity extends ConstructBaseTileEntity implements IInventory{

	public static String nameForNBT = "interface";

	public ConnectionEntry[] connection = new ConnectionEntry[6];
	/**each list's index 0 is always rootback tile*/
	private ArrayList<ConnectionEntry> connections  = new ArrayList<ConnectionEntry>();
	private int index = 0;
	private boolean needCheck = true;
	public IInventory connectedInventory;

	public ConstructInterfaceTileEntity() {

	}

	@Override
	public int getSizeInventory() {
		// TODO 自動生成されたメソッド・スタブ
		return 0;
	}

	@Override
	public ItemStack getStackInSlot(int p_70301_1_) {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public ItemStack decrStackSize(int p_70298_1_, int p_70298_2_) {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public ItemStack getStackInSlotOnClosing(int p_70304_1_) {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public void setInventorySlotContents(int p_70299_1_, ItemStack p_70299_2_) {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public String getInventoryName() {
		// TODO 自動生成されたメソッド・スタブ
		return null;
	}

	@Override
	public boolean hasCustomInventoryName() {
		// TODO 自動生成されたメソッド・スタブ
		return false;
	}

	@Override
	public int getInventoryStackLimit() {
		// TODO 自動生成されたメソッド・スタブ
		return 0;
	}

	@Override
	public boolean isUseableByPlayer(EntityPlayer p_70300_1_) {
		// TODO 自動生成されたメソッド・スタブ
		return false;
	}

	@Override
	public void openInventory() {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public void closeInventory() {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public boolean isItemValidForSlot(int p_94041_1_, ItemStack p_94041_2_) {
		// TODO 自動生成されたメソッド・スタブ
		return false;
	}

	@Override
	public void readFromNBT(NBTTagCompound tag) {
		super.readFromNBT(tag);
		index = sideTag.getInteger("index");
		needCheck = true;
	}

	@Override
	public void writeToNBT(NBTTagCompound tag) {
		checkConnection();
		tag.setByte("io", (byte) flagIO[i]);
		tag.setInteger("index", index);
		super.writeToNBT(tag);
	}

	@Override
	public String getNameForNBT() {
		return nameForNBT;
	}

}

package com.test.multiblock;

import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.Packet;
import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.common.util.Constants;

public class BlockDesignTableTileEntity extends TileEntity {

	public ItemStack[] craftGrid = new ItemStack[9];
	public ItemStack recipe;

	public BlockDesignTableTileEntity() {

	}

	///////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public void markDirty() {
		worldObj.markBlockForUpdate(xCoord, yCoord, zCoord);
	}

	@Override
	public final Packet getDescriptionPacket() {
		NBTTagCompound nbtTagCompound = new NBTTagCompound();
		this.writeToNBT(nbtTagCompound);
		return new S35PacketUpdateTileEntity(this.xCoord, this.yCoord, this.zCoord, 1, nbtTagCompound);
	}

	@Override
	public final void onDataPacket(NetworkManager net, S35PacketUpdateTileEntity pkt) {
		super.onDataPacket(net, pkt);
		NBTTagCompound nbtTagCompound = pkt.func_148857_g();
		this.readFromNBT(nbtTagCompound);
	}

	public void readFromNBT(NBTTagCompound tag) {
		super.readFromNBT(tag);
		NBTTagCompound itemTag = (NBTTagCompound) tag.getCompoundTag("recipe");
		this.recipe = ItemStack.loadItemStackFromNBT(itemTag);
		NBTTagList itemsTagList = tag.getTagList("grid", Constants.NBT.TAG_COMPOUND);
		this.craftGrid = new ItemStack[9];
		for (int tagCounter = 0; tagCounter < itemsTagList.tagCount(); ++tagCounter){
			NBTTagCompound gridTag = (NBTTagCompound) itemsTagList.getCompoundTagAt(tagCounter);
			byte slotIndex = gridTag.getByte("slot");
			if(slotIndex >= 0 && slotIndex < this.craftGrid.length){
				this.craftGrid[slotIndex] = ItemStack.loadItemStackFromNBT(gridTag);
			}
		}
	}

	public void writeToNBT(NBTTagCompound tag) {
		super.writeToNBT(tag);
		if(recipe != null){
			NBTTagCompound itemTag1 = new NBTTagCompound();
			this.recipe.writeToNBT(itemTag1);
			tag.setTag("recipe", itemTag1);
		}
		NBTTagList itemsTagList = new NBTTagList();
		for (int slotIndex = 0; slotIndex < this.craftGrid.length; ++slotIndex){
			if(this.craftGrid[slotIndex] != null){
				NBTTagCompound itemTag2 = new NBTTagCompound();
				itemTag2.setByte("slot", (byte) slotIndex);
				this.craftGrid[slotIndex].writeToNBT(itemTag2);
				itemsTagList.appendTag(itemTag2);
			}
		}
		tag.setTag("grid", itemsTagList);
	}

}

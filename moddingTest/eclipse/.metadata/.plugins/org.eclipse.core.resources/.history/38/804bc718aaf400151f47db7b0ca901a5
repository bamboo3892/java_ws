package com.test.multiblock.construct.tileentity;

import java.util.Random;

import com.test.main.TestCore;
import com.test.multiblock.construct.block.ConstructFunctionalBase;
import com.test.network.SimpleTilePacket;
import com.test.tileentity.ISimpleTilePacketUser;
import com.test.utils.Position;
import com.test.utils.RectangularSolid;

import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.IInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.NetworkManager;
import net.minecraft.network.Packet;
import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.common.util.ForgeDirection;

public abstract class ConstructBaseTileEntity extends TileEntity implements ISimpleTilePacketUser {

	/**0 : input 1 : output 2 : disabled*/
	public int[] flagIO = new int[6];
	public int grade;

	/**server only*/
	private boolean eventScheduled = false;

	/**use for only rendering*/
	public boolean[] isNeighberBaseBlock = new boolean[6];

	public ConstructBaseTileEntity(int grade) {
		this.grade = grade;
		for (int i = 0; i < 6; i++){
			flagIO[i] = 2;
		}
	}

	@Override
	public void updateEntity() {
		if(!worldObj.isRemote){
			if(eventScheduled){
				for (int side = 0; side < 6; side++){
					ForgeDirection dir = ForgeDirection.getOrientation(side);
					if(worldObj.getTileEntity(xCoord + dir.offsetX, yCoord + dir.offsetY, zCoord + dir.offsetZ) instanceof ConstructEventCatcherTileEntity){
						((ConstructEventCatcherTileEntity) worldObj.getTileEntity(xCoord + dir.offsetX, yCoord + dir.offsetY, zCoord + dir.offsetZ)).onEventReceived(dir.getOpposite().ordinal());
					}
				}
				eventScheduled = false;
			}
		}
	}

	protected void dispatchEventOnNextTick() {
		if(!worldObj.isRemote) eventScheduled = true;
	}

	/**effective only on client*/
	public void updateIsNeighberBaseBlock() {
		for (int side = 0; side < 6; side++){
			ForgeDirection dir = ForgeDirection.getOrientation(side);
			isNeighberBaseBlock[side] = worldObj.getBlock(xCoord + dir.offsetX, yCoord + dir.offsetY, zCoord + dir.offsetZ) instanceof ConstructFunctionalBase;
		}
		worldObj.markBlockRangeForRenderUpdate(xCoord, yCoord, zCoord, xCoord, yCoord, zCoord);
	}

	/**drop containeditem or custom NBT item*/
	public void onTileRemoved() {
		if(this instanceof IInventory){
			IInventory tile = (IInventory) this;
			Random rand = worldObj.rand;
			for (int i1 = 0; i1 < tile.getSizeInventory(); ++i1){
				ItemStack itemstack = tile.getStackInSlot(i1);

				if(itemstack != null){
					float f = rand.nextFloat() * 0.8F + 0.1F;
					float f1 = rand.nextFloat() * 0.8F + 0.1F;
					EntityItem entityitem;

					for (float f2 = rand.nextFloat() * 0.8F + 0.1F; itemstack.stackSize > 0; worldObj.spawnEntityInWorld(entityitem)){
						int j1 = rand.nextInt(21) + 10;

						if(j1 > itemstack.stackSize){
							j1 = itemstack.stackSize;
						}

						itemstack.stackSize -= j1;
						entityitem = new EntityItem(worldObj, (double) ((float) xCoord + f), (double) ((float) yCoord + f1), (double) ((float) zCoord + f2), new ItemStack(itemstack.getItem(), j1, itemstack.getItemDamage()));
						float f3 = 0.05F;
						entityitem.motionX = (double) ((float) rand.nextGaussian() * f3);
						entityitem.motionY = (double) ((float) rand.nextGaussian() * f3 + 0.2F);
						entityitem.motionZ = (double) ((float) rand.nextGaussian() * f3);

						if(itemstack.hasTagCompound()){
							entityitem.getEntityItem().setTagCompound((NBTTagCompound) itemstack.getTagCompound().copy());
						}
					}
				}
			}
		}
	}

	public abstract void onRightClicked(EntityPlayer player, int side, float hitX, float hitY, float hitZ);

	public abstract void onShiftRightClicked(EntityPlayer player, int side, float hitX, float hitY, float hitZ);

	public abstract boolean onRightClickedByWrench(EntityPlayer player, int side, float hitX, float hitY, float hitZ);

	/**server only*/
	protected void sendWholeUpdatePacket() {
		if(worldObj.isRemote) throw new NullPointerException("called on invalid side : " + (worldObj.isRemote ? "Client" : "Server"));
		worldObj.markBlockForUpdate(xCoord, yCoord, zCoord);
	}
	/**server only*/
	protected void sendContentsUpdatePacket() {
		if(worldObj.isRemote) throw new NullPointerException("called on invalid side : " + (worldObj.isRemote ? "Client" : "Server"));
		;
		;
		;
	}
	/**server only*/
	protected void sendFlagIOUpdatePacket() {
		if(worldObj.isRemote) throw new NullPointerException("called on invalid side : " + (worldObj.isRemote ? "Client" : "Server"));
		String str = "";
		for(int i=0;i<6;i++){
			str += flagIO[i];
		}
		TestCore.packetDispatcher.sendToAll(new SimpleTilePacket(xCoord, yCoord, zCoord, SimpleTilePacket.FLAG_IO, str));
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public void processCommand(byte command, Object value) {
		if(command == SimpleTilePacket.FLAG_IO && value instanceof String){//should client
			String str = (String) value;
			if(str.length() == 6){
				for (int i = 0; i < 6; i++){
					flagIO[i] = Character.getNumericValue(str.charAt(i));
				}
			}
		}
	}
	@Override
	public final Position getPosition() {
		return new Position(xCoord, yCoord, zCoord);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**contents items update*/
	@Override
	public void markDirty() {
		super.markDirty();
		sendContentsUpdatePacket();
		//worldObj.markBlockForUpdate(xCoord, yCoord, zCoord);
	}

	@Override
	public final Packet getDescriptionPacket() {
		System.out.println(this.getClass().getSimpleName());
		NBTTagCompound nbtTagCompound = new NBTTagCompound();
		this.writeToNBT(nbtTagCompound);
		return new S35PacketUpdateTileEntity(this.xCoord, this.yCoord, this.zCoord, 1, nbtTagCompound);
	}

	@Override
	public final void onDataPacket(NetworkManager net, S35PacketUpdateTileEntity pkt) {
		NBTTagCompound nbtTagCompound = pkt.func_148857_g();
		this.readFromNBT(nbtTagCompound);
	}

	public abstract String getNameForNBT();

	public abstract void writeDetailToNBTForItemStack(NBTTagCompound tag, RectangularSolid solid);

	@Override
	public void readFromNBT(NBTTagCompound tag) {
		super.readFromNBT(tag);
		for (int i = 0; i < 6; i++){
			NBTTagCompound sideTag = tag.getCompoundTag("side" + i);
			flagIO[i] = sideTag.getByte("io");
		}
		this.grade = tag.getInteger("grade");
		eventScheduled = tag.getBoolean("event");
	}

	@Override
	public void writeToNBT(NBTTagCompound tag) {
		super.writeToNBT(tag);
		NBTTagCompound[] side = new NBTTagCompound[6];
		for (int i = 0; i < 6; i++){
			side[i] = new NBTTagCompound();
			side[i].setByte("io", (byte) flagIO[i]);
			tag.setTag("side" + i, side[i]);
		}
		tag.setInteger("grade", grade);
		tag.setBoolean("event", eventScheduled);
	}

}

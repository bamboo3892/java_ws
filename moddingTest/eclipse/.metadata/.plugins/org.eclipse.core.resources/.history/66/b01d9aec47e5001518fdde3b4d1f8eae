package olddirectory.lasertech.tile;

import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.ISidedInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.common.util.ForgeDirection;
import olddirectory.lasertech.helper.InventoryHelper;
import olddirectory.lasertech.logic.Laser;

public class TileLaserEmitterItem extends TileLaserEmitter {

	public TileLaserEmitterItem() {
		this.type = "Item";
	}

	@Override
	public void laserWork() {
		if (worldObj.isRemote) return;
		ForgeDirection side = this.getDirection();
		TileEntity backTile = this.getWorldObj().getTileEntity(xCoord + side.getOpposite().offsetX,
				yCoord + side.getOpposite().offsetY, zCoord + side.getOpposite().offsetZ);
		if (backTile instanceof IInventory) {
			IInventory backInv = (IInventory) backTile;
			if (backTile instanceof ISidedInventory) {
				ISidedInventory backSidedInv = (ISidedInventory) backTile;
				int[] accessible = backSidedInv.getAccessibleSlotsFromSide(side.ordinal());
				outside: for (int slot : accessible) {
					ItemStack destitem = backSidedInv.getStackInSlot(slot);
					if (destitem != null) {
						if (backSidedInv.canExtractItem(slot, destitem, side.ordinal())) {
							for (Laser laser : this.lasers) {
								if (laser.collided && laser.collidedtile != null
										&& InventoryHelper.tryPushItem(this.getWorldObj(), laser.collidedtile.xCoord,
												laser.collidedtile.yCoord, laser.collidedtile.zCoord,
												laser.direction.getOpposite(), destitem)) {
									backSidedInv.decrStackSize(slot, 1);
									IInventory destinv = (IInventory) laser.collidedtile;
									destinv.markDirty();
									backSidedInv.markDirty();
									break outside;
								}
							}
						}
					}
				}
			} else {
				outside: for (int slot = 0; slot < backInv.getSizeInventory(); slot++) {
					ItemStack destitem = backInv.getStackInSlot(slot);
					if (destitem != null) {
						for (Laser laser : this.lasers) {
							if (laser.collided && laser.collidedtile != null
									&& InventoryHelper.tryPushItem(this.getWorldObj(), laser.collidedtile.xCoord,
											laser.collidedtile.yCoord, laser.collidedtile.zCoord,
											laser.direction.getOpposite(), destitem)) {
								backInv.decrStackSize(slot, 1);
								IInventory destinv = (IInventory) laser.collidedtile;
								destinv.markDirty();
								backInv.markDirty();
								break outside;
							}
						}
					}
				}
			}
		}
	}

}

package com.test.server.gui;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.InventoryCraftResult;
import net.minecraft.inventory.InventoryCrafting;
import net.minecraft.inventory.Slot;
import net.minecraft.inventory.SlotCrafting;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.CraftingManager;
import net.minecraft.world.World;

public class DesignTableContainer extends Container {

	/** The crafting matrix inventory (3x3). */
	public InventoryCrafting craftMatrix = new InventoryCrafting(this, 3, 3);
	public IInventory craftResult = new InventoryCraftResult();
	private World worldObj;

	public DesignTableContainer(InventoryPlayer inventoryPlayer, World world) {
		this.worldObj = world;
		this.addSlotToContainer(new SlotCrafting(inventoryPlayer.player, this.craftMatrix, this.craftResult, 0, 124, 35));
		int row;
		int i1;

		for (row = 0; row < 3; ++row){
			for (i1 = 0; i1 < 3; ++i1){
				this.addSlotToContainer(new Slot(this.craftMatrix, i1 + row * 3, 30 + i1 * 18, 17 + row * 18));
			}
		}

		for (row = 0; row < 3; ++row){
			for (i1 = 0; i1 < 9; ++i1){
				this.addSlotToContainer(new Slot(inventoryPlayer, i1 + row * 9 + 9, 8 + i1 * 18, 84 + row * 18));
			}
		}

		for (row = 0; row < 9; ++row){
			this.addSlotToContainer(new Slot(inventoryPlayer, row, 8 + row * 18, 142));
		}

		this.onCraftMatrixChanged(this.craftMatrix);
	}

	public void onCraftMatrixChanged(IInventory inventory) {
		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.worldObj));
	}

	public void onContainerClosed(EntityPlayer player) {
		super.onContainerClosed(player);

		if(!this.worldObj.isRemote){
			for (int i = 0; i < 9; ++i){
				ItemStack itemstack = this.craftMatrix.getStackInSlotOnClosing(i);

				if(itemstack != null){
					player.dropPlayerItemWithRandomChoice(itemstack, false);
				}
			}
		}
	}

	public boolean canInteractWith(EntityPlayer player) {
		return true;
	}

	public ItemStack transferStackInSlot(EntityPlayer player, int slotIndex) {
		ItemStack itemstack = null;
		Slot slot = (Slot) this.inventorySlots.get(slotIndex);

		if(slot != null && slot.getHasStack()){
			ItemStack itemstack1 = slot.getStack();
			itemstack = itemstack1.copy();

			if(slotIndex == 0){
				if(!this.mergeItemStack(itemstack1, 10, 46, true)){
					return null;
				}

				slot.onSlotChange(itemstack1, itemstack);
			}else if(slotIndex >= 10 && slotIndex < 37){
				if(!this.mergeItemStack(itemstack1, 37, 46, false)){
					return null;
				}
			}else if(slotIndex >= 37 && slotIndex < 46){
				if(!this.mergeItemStack(itemstack1, 10, 37, false)){
					return null;
				}
			}else if(!this.mergeItemStack(itemstack1, 10, 46, false)){
				return null;
			}

			if(itemstack1.stackSize == 0){
				slot.putStack((ItemStack) null);
			}else{
				slot.onSlotChanged();
			}

			if(itemstack1.stackSize == itemstack.stackSize){
				return null;
			}

			slot.onPickupFromSlot(player, itemstack1);
		}

		return itemstack;
	}

	public boolean func_94530_a(ItemStack itemStack, Slot slot) {
		return slot.inventory != this.craftResult && super.func_94530_a(itemStack, slot);
	}

}

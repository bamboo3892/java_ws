package com.test.client.renderer;

import com.test.main.TestCore;
import com.test.multiblock.construct.tileentity.ConstructClockPulserTileEntity;
import com.test.multiblock.construct.tileentity.ConstructInventoryBaseTileEntity;
import com.test.utils.RenderingHelper;

import cpw.mods.fml.client.registry.ISimpleBlockRenderingHandler;
import net.minecraft.block.Block;
import net.minecraft.client.renderer.RenderBlocks;
import net.minecraft.init.Blocks;
import net.minecraft.world.IBlockAccess;

public class ConstructBaseRenderer implements ISimpleBlockRenderingHandler {

	public ConstructBaseRenderer() {

	}

	@Override
	public void renderInventoryBlock(Block block, int metadata, int modelId, RenderBlocks renderer) {
		RenderingHelper.renderInvCuboid(renderer, block, 2F / 16F, 2F / 16F, 2F / 16F, 14F / 16F, 14F / 16F, 14F / 16F, 4);
		renderer.setOverrideBlockTexture(Blocks.iron_block.getBlockTextureFromSide(0));
		RenderingHelper.renderInvCubeFrame(renderer, block, 0F / 16F, 0F / 16F, 0F / 16F, 16F / 16F, 16F / 16F, 16F / 16F, 1F / 16F);
		renderer.clearOverrideBlockTexture();
	}

	@Override
	public boolean renderWorldBlock(IBlockAccess world, int x, int y, int z, Block block, int modelId, RenderBlocks renderer) {
		renderer.setRenderBounds(2F / 16F, 2F / 16F, 2F / 16F, 14F / 16F, 14F / 16F, 14F / 16F);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setOverrideBlockTexture(Blocks.iron_block.getBlockTextureFromSide(0));
		RenderingHelper.renderCubeFrame(x, y, z, block, 0F / 16F, 0F / 16F, 0F / 16F, 16F / 16F, 16F / 16F, 16F / 16F, 1F / 16F, renderer);
		renderer.clearOverrideBlockTexture();

		int[] flagIO = new int[6];
		if (world.getTileEntity(x, y, z) instanceof ConstructInventoryBaseTileEntity){
			flagIO = ((ConstructInventoryBaseTileEntity)world.getTileEntity(x, y, z)).flagIO;
		}else if (world.getTileEntity(x, y, z) instanceof ConstructClockPulserTileEntity){
			flagIO = ((ConstructClockPulserTileEntity)world.getTileEntity(x, y, z)).flagIO;
		}
		if (flagIO != null) {
			if (flagIO[0] == 0) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 3));
				renderer.setRenderBounds(5F / 16F, 0F / 16F, 5F / 16F, 11F / 16F, 2F / 16F, 11F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			} else if (flagIO[0] == 1) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 1));
				renderer.setRenderBounds(5F / 16F, 0F / 16F, 5F / 16F, 11F / 16F, 2F / 16F, 11F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			}
			if (flagIO[1] == 0) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 3));
				renderer.setRenderBounds(5F / 16F, 14F / 16F, 5F / 16F, 11F / 16F, 16F / 16F, 11F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			} else if (flagIO[1] == 1) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 1));
				renderer.setRenderBounds(5F / 16F, 14F / 16F, 5F / 16F, 11F / 16F, 16F / 16F, 11F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			}
			if (flagIO[2] == 0) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 3));
				renderer.setRenderBounds(5F / 16F, 5F / 16F, 0F / 16F, 11F / 16F, 11F / 16F, 2F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			} else if (flagIO[2] == 1) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 1));
				renderer.setRenderBounds(5F / 16F, 5F / 16F, 0F / 16F, 11F / 16F, 11F / 16F, 2F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			}
			if (flagIO[3] == 0) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 3));
				renderer.setRenderBounds(5F / 16F, 5F / 16F, 14F / 16F, 11F / 16F, 11F / 16F, 16F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			} else if (flagIO[3] == 1) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 1));
				renderer.setRenderBounds(5F / 16F, 5F / 16F, 14F / 16F, 11F / 16F, 11F / 16F, 16F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			}
			if (flagIO[4] == 0) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 3));
				renderer.setRenderBounds(0F / 16F, 5F / 16F, 5F / 16F, 2F / 16F, 11F / 16F, 11F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			} else if (flagIO[4] == 1) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 1));
				renderer.setRenderBounds(0F / 16F, 5F / 16F, 5F / 16F, 2F / 16F, 11F / 16F, 11F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			}
			if (flagIO[5] == 0) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 3));
				renderer.setRenderBounds(14F / 16F, 5F / 16F, 5F / 16F, 16F / 16F, 11F / 16F, 11F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			} else if (flagIO[5] == 1) {
				renderer.setOverrideBlockTexture(Blocks.wool.getIcon(0, 1));
				renderer.setRenderBounds(14F / 16F, 5F / 16F, 5F / 16F, 16F / 16F, 11F / 16F, 11F / 16F);
				renderer.renderStandardBlock(block, x, y, z);
			}
			renderer.clearOverrideBlockTexture();
		}
		return true;
	}

	private void renderCubeFrame(int x, int y, int z, Block block, double startX, double startY, double startZ, double sizeX, double sizeY, double sizeZ, double thickness, RenderBlocks renderer) {
		renderer.setRenderBounds(startX, startY, startZ, startX + thickness, startY + sizeY, startZ + thickness);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setRenderBounds(startX + sizeX - thickness, startY, startZ, startX + sizeX, startY + sizeY, startZ + thickness);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setRenderBounds(startX, startY, startZ + sizeZ - thickness, startX + thickness, startY + sizeY, startZ + sizeZ);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setRenderBounds(startX + sizeX - thickness, startY, startZ + sizeZ - thickness, startX + sizeX, startY + sizeY, startZ + sizeZ);
		renderer.renderStandardBlock(block, x, y, z);

		renderer.setRenderBounds(startX + thickness, startY, startZ, startX + sizeX - thickness, startY + thickness, startZ + thickness);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setRenderBounds(startX, startY, startZ + thickness, startX + thickness, startY + thickness, startZ + sizeZ - thickness);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setRenderBounds(startX + sizeX - thickness, startY, startZ + thickness, startX + sizeX, startY + thickness, startZ + sizeZ - thickness);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setRenderBounds(startX + thickness, startY, startZ + sizeZ - thickness, startX + sizeX - thickness, startY + thickness, startZ + sizeZ);
		renderer.renderStandardBlock(block, x, y, z);

		renderer.setRenderBounds(startX + thickness, startY + sizeY - thickness, startZ, startX + sizeX - thickness, startY + sizeY, startZ + thickness);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setRenderBounds(startX, startY + sizeY - thickness, startZ + thickness, startX + thickness, startY + sizeY, startZ + sizeZ - thickness);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setRenderBounds(startX + sizeX - thickness, startY + sizeY - thickness, startZ + thickness, startX + sizeX, startY + sizeY, startZ + sizeZ - thickness);
		renderer.renderStandardBlock(block, x, y, z);
		renderer.setRenderBounds(startX + thickness, startY + sizeY - thickness, startZ + sizeZ - thickness, startX + sizeX - thickness, startY + sizeY, startZ + sizeZ);
		renderer.renderStandardBlock(block, x, y, z);
	}

	@Override
	public boolean shouldRender3DInInventory(int modelId) {
		return true;
	}

	@Override
	public int getRenderId() {
		return TestCore.CONSTRUCTBASE_RENDER_ID;
	}

}

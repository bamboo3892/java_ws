package com.okina.utils;

import com.okina.multiblock.construct.IProcessorContainer;
import com.okina.multiblock.construct.processor.ProcessorBase;

import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.world.World;
import net.minecraftforge.common.util.ForgeDirection;

/**
 * @author okina
 * @param <T> Type must be TileEntity or ProcessorBase
 */
public class ConnectionEntry<T> {

	//	private T tile;
	private Object world;
	public final int x;
	public final int y;
	public final int z;
	/** -1 : no side information */
	public final int side;

	public ConnectionEntry(int x, int y, int z) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.side = -1;
	}

	public ConnectionEntry(int x, int y, int z, int side) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.side = side;
	}

	/** tile must be TileEntity or processor*/
	public ConnectionEntry(T tile, int side) throws IllegalArgumentException {
		if(tile instanceof TileEntity){
			TileEntity tile2 = (TileEntity) tile;
			//			this.tile = tile;
			world = tile2.getWorldObj();
			this.x = tile2.xCoord;
			this.y = tile2.yCoord;
			this.z = tile2.zCoord;
			this.side = side;
		}else if(tile instanceof ProcessorBase){
			ProcessorBase tile2 = (ProcessorBase) tile;
			//			this.tile = tile;
			world = tile2.pc;
			this.x = tile2.xCoord;
			this.y = tile2.yCoord;
			this.z = tile2.zCoord;
			this.side = side;
		}else{
			throw new IllegalArgumentException("parameter should be TileEntity");
		}
	}

	/** tile must be TileEntity */
	public ConnectionEntry(T tile) throws IllegalArgumentException {
		this(tile, -1);
	}

	public Position getPosition() {
		return new Position(x, y, z);
	}

	public boolean hasTile() {
		return getTile() != null;
	}

	public T getTile() {
		if(world instanceof World){
			return (T) ((World) world).getTileEntity(x, y, z);
		}else if(world instanceof IProcessorContainer){
			return (T) ((IProcessorContainer) world).getProcessor(x, y, z);
		}
		return null;
	}

	public void setWorld(Object world) {
		this.world = world;
	}

	public Object getWorld() {
		return world;
	}

	public void writeToNBT(NBTTagCompound tag) {
		tag.setInteger("x", x);
		tag.setInteger("y", y);
		tag.setInteger("z", z);
		tag.setInteger("side", side);
	}

	@Override
	public boolean equals(Object o) {
		return equals(o, true);
	}

	public boolean equals(Object o, boolean sideMode) {
		if(o instanceof ConnectionEntry){
			ConnectionEntry<?> entry = (ConnectionEntry<?>) o;
			return world == entry.getWorld() && x == entry.x && y == entry.y && z == entry.z && (sideMode || side == entry.side);
		}
		return false;
	}

	@Override
	public String toString() {
		T tile = getTile();
		if(tile != null){
			return getPosition() + " " + ForgeDirection.getOrientation(side).toString() + " " + tile.getClass().getSimpleName();
		}else{
			return getPosition() + " " + ForgeDirection.getOrientation(side).toString() + " No Tile";
		}
	}

	public static ConnectionEntry createFromNBT(NBTTagCompound tag, Object world) {
		if(tag == null || !tag.hasKey("x") || !tag.hasKey("y") || !tag.hasKey("z") || !tag.hasKey("side")) return null;
		int x = tag.getInteger("x");
		int y = tag.getInteger("y");
		int z = tag.getInteger("z");
		int side = tag.getInteger("side");
		return new ConnectionEntry(x, y, z, side);
	}

}

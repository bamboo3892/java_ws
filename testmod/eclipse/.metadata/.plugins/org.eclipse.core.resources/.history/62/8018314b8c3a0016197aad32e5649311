package com.okina.multiblock.construct.processor;

import org.lwjgl.opengl.GL11;

import com.okina.main.TestCore;
import com.okina.multiblock.construct.IProcessorContainer;
import com.okina.multiblock.construct.ISignalReceiver;
import com.okina.network.PacketType;
import com.okina.utils.ColoredString;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.block.Block;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;

public class RectificationRepeaterProcessor extends SignalEmitterProcessor implements ISignalReceiver {

	/**use only on server*/
	public int lastEmittedDirection = 0;

	public RectificationRepeaterProcessor(IProcessorContainer pc, boolean isRemote, boolean isTile) {
		super(pc, isRemote, isTile);
	}

	@Override
	public void updateEntity() {
		super.updateEntity();
	}

	@Override
	public void processCommand(PacketType type, Object value) {
		if(type == PacketType.OTHER2 && value instanceof Integer){//both side
			lastEmittedDirection = (Integer) value;
		}
		super.processCommand(type, value);
	}

	@Override
	public String getNameForNBT() {
		return "rectificationRepeater";
	}

	@Override
	public void readFromNBT(NBTTagCompound tag) {
		super.readFromNBT(tag);
		lastEmittedDirection = tag.getInteger("lastEmittedDirection");
	}

	@Override
	public void writeToNBT(NBTTagCompound tag) {
		super.writeToNBT(tag);
		tag.setInteger("lastEmittedDirection", lastEmittedDirection);
	}

	//non-override////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private int getNextEmitDirection() {
		int dir;
		do{
			dir = lastEmittedDirection == 5 ? 0 : lastEmittedDirection + 1;
			if(flagIO[dir] == 1 && connection[dir] != null && connection[dir].hasTile()) return dir;
		}while (dir != lastEmittedDirection);
		if(flagIO[dir] == 1 && connection[dir] != null && connection[dir].hasTile()){
			return dir;
		}
		return -1;
	}

	@Override
	public void onSignalReceived() {
		assert !isRemote;
		int dir = getNextEmitDirection();
		if(dir != -1){
			emitSignal(dir);
			lastEmittedDirection = dir;
			pc.sendPacket(PacketType.OTHER2, lastEmittedDirection);
		}
	}

	//render//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public ColoredString getNameForHUD() {
		return new ColoredString("RECTIFICATION REPEATER", ColorCode[grade]);
	}

	//tile entity//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@SideOnly(Side.CLIENT)
	@Override
	public void customRenderTile(float partialTicks) {
		if(getStackInSlot(0) != null){
			float ticks = pc.world().getTotalWorldTime() + partialTicks;

			GL11.glPushMatrix();
			GL11.glDisable(GL11.GL_CULL_FACE);
			GL11.glTranslatef(0.5F, 0.3F, 0.5F);
			GL11.glScalef(2F, 2F, 2F);
			GL11.glRotatef(0.1F * ticks % 360.0F, 0.0F, 1.0F, 0.0F);

			EntityItem entityitem = null;
			ItemStack is = getStackInSlot(0).copy();
			is.stackSize = 1;
			entityitem = new EntityItem(pc.world(), 0.0D, 0.0D, 0.0D, is);
			entityitem.hoverStart = 0.0F;

			RenderManager.instance.renderEntityWithPosYaw(entityitem, 0.0D, 0.0D, 0.0D, 0.0F, 0.0F);

			if(getStackInSlot(0).stackSize >= 2){
				if(Block.getBlockFromItem(getStackInSlot(0).getItem()) != Blocks.air){
					RenderManager.instance.renderEntityWithPosYaw(entityitem, 0.0D, 0.25D, 0.0D, 0.0F, 0.0F);
				}else{
					GL11.glTranslatef(0.05F, 0.05F, 0.02F);
					RenderManager.instance.renderEntityWithPosYaw(entityitem, 0.0D, 0.0D, 0.0D, 0.0F, 0.0F);
				}
			}
			GL11.glEnable(GL11.GL_CULL_FACE);
			GL11.glPopMatrix();
		}
	}

	//part////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	public Block getRenderBlock() {
		return TestCore.constructRectificationRepeater[grade];
	}

}
